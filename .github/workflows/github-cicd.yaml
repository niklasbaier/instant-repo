name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

# TODO: add appropriate build and deploy jobs
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup steps
      # -----------
      - name: Read Python version from .python-version file
        id: python_version
        run: bash scripts/cicd/setup/read_python_version.sh

      - name: Set up Python ${{ steps.python_version.outputs.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}

      - name: Read Poetry version from .poetry-version file
        id: poetry_version
        run: echo "::set-output name=POETRY_VERSION::$(cat .poetry-version)"

      - name: Install pipx
        run: python3 -m pip install --user pipx

      - name: Install Poetry ${{ steps.poetry_version.outputs.POETRY_VERSION }}
        run: |
          python3 -m pipx ensurepath
          pipx install poetry==${{ steps.poetry_version.outputs.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # QA steps (could also live in their own job)
      # -----------
      - name: Ensure correct specifications of dependencies
        run: poetry check

      - name: Static tests (linting with ruff)
        run: poetry run ruff check .

      # only applicable if using an API service that uses OpenAPI
      # - name: OpenAPI spec linting
      #   run: poetry run openapi-spec-validator services/api/openapi.yml

      # only applicable if using a DB service that uses alembic for migrations
      # - name: Alembic check
      #   run: |
      #     poetry run alembic upgrade head
      #     poetry run alembic check

      - name: Unit tests
        run: poetry run pytest tests/unit

      - name: Integration tests
        run: poetry run pytest tests/integration

      - name: Acceptance tests
        run: poetry run pytest tests/acceptance

      # - name: Report test results (codecov)
      #   run: ...

  bump:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.PERSONAL_ACCESS_TOKEN }}"
          fetch-depth: 0

      - name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build, bump]
    steps:
      - uses: actions/cache@v2
        with:
          key: ${{ github.ref }}$
          path: .cache

      - name: Checkout code
        uses: actions/checkout@v3

      # Setup steps
      # -----------
      - name: Read Python version from .python-version file
        id: python_version
        run: echo "::set-output name=PYTHON_VERSION::$(cat .python-version)"

      - name: Set up Python ${{ steps.python_version.outputs.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}

      - name: Read Poetry version from .poetry-version file
        id: poetry_version
        run: echo "::set-output name=POETRY_VERSION::$(cat .poetry-version)"

      - name: Install pipx
        run: python3 -m pip install --user pipx

      - name: Install Poetry ${{ steps.poetry_version.outputs.POETRY_VERSION }}
        run: |
          python3 -m pipx ensurepath
          pipx install poetry==${{ steps.poetry_version.outputs.POETRY_VERSION }}

      # Docs steps
      # -----------
      - name: Install docs dependencies
        run: poetry install --only docs --no-interaction --no-ansi

      - name: Trigger docs deployment (`pages-build-deployment` workflow)
        run: poetry run mkdocs gh-deploy --force
